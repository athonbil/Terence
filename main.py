# <---BIBLIOTECA--->
import discord
from discord.ext import commands
import random
import re
import pandas as pd
# dicion√°rio portugues para pegar 3 palavras e soltar a boa
# pesquisador de nome de m√∫sica aleatoria para dar ideia de nome de stand

# <---VARI√ÅVEIS--->
pericias = {
    "fisico": ["Atletismo ", "F√¥lego ", "Resist√™ncia F√≠sica"],
    "agilidade": ["Prestidigita√ß√£o ", "Acrobacia ", "Pickpocket ", "Quick Draw"],
    "precisao": ["Furtividade ", "Desenhar ", "Dan√ßar ", "Mirar ", "Desviar "],
    "inteligencia": ["Concentra√ß√£o ", "Religi√£o ", "Hist√≥ria ", "Lidar com M√°quinas ", "Intui√ß√£o ", "Aprender"],
    "sabedoria": ["Medicina", "Lidar com Animais", "Percep√ß√£o", "Natureza", "Ensinar"],
    "carisma": ["Atua√ß√£o ", "Mentir ", "Intimida√ß√£o ", "Sedu√ß√£o ", "Diplomacia ", "JISM(i) "],
    "sorte": ["Jogar"]
}

# setup
intents = discord.Intents.default()
intents.messages = True
intents.message_content = True
bot = commands.Bot(command_prefix="$", intents=intents)

# <---EVENTOS--->

# inicializa√ß√£o
@bot.event
async def onReady():
    print(f"Conectado como {bot.user.name}")

# comando de oi
@bot.command(name="hello")
async def hello(ctx):
    user = ctx.author.mention
    await ctx.send(f"üëã Salve, {user}! B√£o? nega nega nega")

# comando de rolar dados
@bot.command(name="roll")
async def roll(ctx, dado: str):
    try:
        match = re.match(r"(\d+)d(\d+)([+\-*/]\d+)?", dado.lower())
        if not match:
            raise ValueError("Formato inv√°lido. Use o formato `XdY+Z`, `XdY-Z`, `XdY*Z` ou `XdY/Z`.")

      
        num_dado = int(match.group(1))
        tam_dado = int(match.group(2))
        modificador = match.group(3)  

 
        if num_dado <= 0 or tam_dado <= 0:
            raise ValueError("O n√∫mero de dados e lados deve ser maior que 0.")

        rolls = [random.randint(1, tam_dado) for _ in range(num_dado)]
        total = sum(rolls)

        if modificador:
            operador = modificador[0]  
            valor = int(modificador[1:])  
            if operador == "+":
                total += valor
            elif operador == "-":
                total -= valor
            elif operador == "*":
                total *= valor
            elif operador == "/":
                total //= valor 

        user = ctx.author.mention

        await ctx.send(
            f"**Rolagem de dados para {user}:**\n"
            f"üé≤ Dados rolados: `{rolls}`\n"
            f"‚ú® Modificador: `{modificador or ' '}`\n"
            f"üî• **Total:** `{total}`"
        )
    except Exception as e:
        await ctx.send(f"‚ö†Ô∏è **Erro:** {e}")

# comando mostar modificador
@bot.command(name="mod")
async def mod(ctx):
    await ctx.send(
        f"# Modificadores\n"
        f"**ATRIBUTOS\n**"
        f"‚Ä¢ A: +25\n"
        f"‚Ä¢ B: +20\n"
        f"‚Ä¢ C: +15\n"
        f"‚Ä¢ D: +10\n"
        f"‚Ä¢ E: +5\n"
        f"‚Ä¢ ‚àÖ: 0\n\n"
        f"**PER√çCIAS**\n"
        f"‚Ä¢ Todas as per√≠cias adicionam um b√¥nus de +3 ao atributo correspondente quando rolado.\n\n"
        f"**SUPER ATRIBUTOS**\n"
        f"‚Ä¢ Concedem um b√¥nus de **+3** ao atributo\n"
        f"‚Ä¢ Em caso de empate, quem possui um **Super Atributo** √© considerado o vencedor.\n\n"
        f"**H√çPER ATRIBUTOS**\n"
        f"‚Ä¢ Concedem um b√¥nus adicional de +5 ao atributo.\n"
        f"‚Ä¢ Em caso de empate com um Super Atributo, o H√≠per Atributo √© o vencedor.\n"
        f"‚Ä¢ Caso a disputa seja entre um **H√≠per Atributo** e um atributo comum (sem modificadores especiais), o **H√≠per Atributo** vence automaticamente."   
    )

# comando para mostrar pericias
@bot.command(name="pericias")
async def pericias_command(ctx, atributo: str = None):
    if not atributo:
        await ctx.send(
            "Por favor, digite `$pericias <atributo>` para listar as per√≠cias.\n"
            "Atributos dispon√≠veis:\n"
            "- üêí geral\n"
            "- ü¶æ fisico\n"
            "- üí® agilidade\n"
            "- üéØ precisao\n"
            "- ü§ì inteligencia\n"
            "- üßô‚Äç‚ôÇÔ∏è sabedoria\n"
            "- üë≥‚Äç‚ôÇÔ∏è carisma\n"
            "- üòé sorte"
        )
        return

    user = ctx.author.mention

    if atributo.lower() == "geral":
        todas_pericias = "\n".join(
            [f"**{chave.capitalize()}**: {', '.join(valores)}" for chave, valores in pericias.items()]
        )
        await ctx.send(f"{user} Aqui est√£o todas as per√≠cias:\n\n{todas_pericias}")

    elif atributo.lower() in pericias:
        lista_pericias = ", ".join(pericias[atributo.lower()])
        await ctx.send(f"{user} As per√≠cias de **{atributo.capitalize()}** s√£o:\n{lista_pericias}")
    else:

        await ctx.send(
            f"{user} Atributo n√£o existe. Escolha um dos seguintes:\n"
            "- geral\n"
            "- fisico\n"
            "- agilidade\n"
            "- precisao\n"
            "- inteligencia\n"
            "- sabedoria\n"
            "- carisma\n"
            "- sorte"
        )


# comando de rolar stand
@bot.command(name="stand")
async def stand(ctx):
    user = ctx.author.mention

    try:
        # Lendo os nomes dos stands
        with open('stands.txt', 'r', encoding='utf-8') as arquivo_stand:
            stands = arquivo_stand.read().split(", ")
            stand_sorteado = random.choice(stands).strip()

        # Tentando encontrar a descri√ß√£o do stand sorteado
        try:
            with open('descricao.txt', 'r', encoding='utf-8') as arquivo_descricao:
                descricao = arquivo_descricao.read()

                stand_inicio = descricao.find(stand_sorteado)
                if stand_inicio == -1:
                    descricao_final = "Descri√ß√£o n√£o encontrada."
                else:
                    stand_fim = descricao.find('\n\n', stand_inicio + len(stand_sorteado))
                    if stand_fim == -1:
                        stand_fim = len(descricao)
                    descricao_final = descricao[stand_inicio:stand_fim].strip()
        except FileNotFoundError:
            descricao_final = "Arquivo de descri√ß√£o n√£o encontrado."
        except Exception as e:
            descricao_final = f"Erro ao buscar descri√ß√£o: {e}"

        # Enviando a mensagem com o stand sorteado e a descri√ß√£o
        await ctx.send(
            f"‚≠ê Seu esp√≠rito evoluiu, sua mente e seu corpo se fortaleceram.\n"
            f"{user} acaba de despertar üî•: \n"
            f"**„Äé{stand_sorteado}„Äè** üíã\n"
            f"üìù Descri√ß√£o: \n```\n{descricao_final}\n```"
        )
    except FileNotFoundError:
        await ctx.send(f"‚ö†Ô∏è **Erro:** Arquivo de stands n√£o encontrado.")
    except Exception as e:
        await ctx.send(f"‚ö†Ô∏è **Erro inesperado:** {e}")

# comando de buscar descri√ß√£o de stand
@bot.command(name="info")
async def stand_descricao(ctx, *, nome_stand: str):
    user = ctx.author.mention
    try:
        with open('descricao.txt', 'r', encoding='utf-8') as arquivo:
            descricao = arquivo.read()

            stand_inicio = descricao.find(nome_stand)
            if stand_inicio == -1:
                raise ValueError(f"Descri√ß√£o de „Äé{nome_stand}„Äè n√£o encontrada.")

            stand_fim = descricao.find('\n\n', stand_inicio + len(nome_stand))
            if stand_fim == -1:
                stand_fim = len(descricao)
            descricao_final = descricao[stand_inicio:stand_fim].strip()

            await ctx.send(
                f"‚≠ê {user}, aqui est√° a descri√ß√£o de „Äé{nome_stand}„Äè:\n"
                f"```\n{descricao_final}\n```"
            )
    except FileNotFoundError:
        await ctx.send(f"‚ö†Ô∏è **Erro:** Arquivo de descri√ß√£o n√£o encontrado.")
    except ValueError as e:
        await ctx.send(f"‚ö†Ô∏è **Erro:** {e}")
    except Exception as e:
        await ctx.send(f"‚ö†Ô∏è **Erro inesperado:** {e}")




# <---RODAR BOT--->
bot.run("")